from fastapi import FastAPI, Form, UploadFile, File, Response
from fastapi.params import Body
import logging as logger
import io
import PIL.Image as PImage
import json
import matplotlib.pyplot as plt
import string
from difflib import SequenceMatcher
# from pdf2image import convert_from_bytes
# import PyMu

from keras_controller.test_generator import generate_text_box
from keras_controller.text_detector import read_image_from_files, read_image_from_test, read_image, load_result, result_by_string
# from pdf_images_extract import extract_pdf_images

app = FastAPI()
logger.basicConfig(level=logger.INFO)


@app.get("/return")
async def return_result():
    return result_by_string()


@app.post("/read/auto_image")
async def read_autogenerated_image():
    alphabet=string.digits + string.ascii_letters + '!?. '
    font = "custom_font/arial.ttf"
    ft_image = [generate_text_box(alphabet, font, size=1)]
    read_image_from_files(ft_image)
    return result_by_string()


@app.post("/read/test_set")
async def read_test_images():
    read_image_from_test()
    return result_by_string()
    
    
@app.post("/read/custom")
async def create_upload_file(body="", uploaded_file: UploadFile = File(...)):
    image = to_image(uploaded_file)
    read_image_from_files(image)
    return result_by_string()


# @app.post("/validate/pdf")
# async def validate_pdf(body="", uploaded_file : UploadFile = File(...)):
#     output = ""
#     contents = uploaded_file.file.read()
#     pdf_images = extract_pdf_images(io.BytesIO(contents))
#     for pages in pdf_images:
#         for image in pages:
#             read_image_from_files(image)
#             output = output + result_by_string()
#             output = output + "\n"

#     return SequenceMatcher(None, output, body).ratio()


def to_image(uploaded_file: UploadFile):
    contents = uploaded_file.file.read()
    temp_file = io.BytesIO(contents)
    image = PImage.open(temp_file).convert('RGB')
    return image


# @app.post("/read/pdf")
# async def read_pdf(body="", uploaded_file: UploadFile = File(...)):
#     images = pdf_to_images(uploaded_file)
#     read_image_from_files(images)
#     return result_by_string()

# def pdf_to_images(uploaded_file: UploadFile):
#     contents = uploaded_file.file.read()
#     images = convert_from_bytes(contents)
#     final_imgs = []
#     for image in images:
#         final_imgs.append(image.convert('RGB'))
#     return final_imgs